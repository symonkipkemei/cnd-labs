Convention for representing and interacting with objects in HTML, XHTML and XML documents
This article includes a list of general references, but it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations. (August 2010) (Learn how and when to remove this template message)
Document Object Model (DOM)Example of DOM hierarchy in an HTML documentAbbreviationDOMFirst publishedOctober 1, 1998; 24 years ago (1998-10-01)Latest versionDOM4[1]November 19, 2015; 7 years ago (2015-11-19)OrganizationWorld Wide Web Consortium, WHATWGBase standardsWHATWG DOM Living StandardW3C DOM4
HTML
Dynamic HTML
HTML5
article
audio
canvas
video
XHTML
Basic
Mobile Profile
HTML element
meta
div and span
blink
marquee
HTML attribute
alt attribute
HTML frame
HTML editor
Character encodings
named characters
Unicode
Language code
Document Object Model
Browser Object Model
Style sheets
CSS
Font family
Web colors
JavaScript
WebGL
WebCL
W3C
Validator
WHATWG
Quirks mode
Web storage
Rendering engine

Comparisons
Document markup languages
Comparison of browser engines
vte
The Document Object Model (DOM) is a cross-platform and language-independent interface that treats an XML or HTML document as a tree structure wherein each node is an object representing a part of the document. The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects. DOM methods allow programmatic access to the tree; with them one can change the structure, style or content of a document.[2] Nodes can have event handlers attached to them. Once an event is triggered, the event handlers get executed.[3]
The principal standardization of the DOM was handled by the World Wide Web Consortium (W3C), which last developed a recommendation in 2004. WHATWG took over the development of the standard, publishing it as a living document. The W3C now publishes stable snapshots of the WHATWG standard.
In HTML DOM (Document Object Model), every element is a node:[4]

A document is a document node.
All HTML elements are element nodes.
All HTML attributes are attribute nodes.
Text inserted into HTML elements are text nodes.
Comments are comment nodes.

History[edit]
The history of the Document Object Model is intertwined with the history of the "browser wars" of the late 1990s between Netscape Navigator and Microsoft Internet Explorer, as well as with that of JavaScript and JScript, the first scripting languages to be widely implemented in the JavaScript engines of web browsers.
JavaScript was released by Netscape Communications in 1995 within Netscape Navigator 2.0. Netscape's competitor, Microsoft, released Internet Explorer 3.0 the following year with a reimplementation of JavaScript called JScript. JavaScript and JScript let web developers create web pages with client-side interactivity. The limited facilities for detecting user-generated events and modifying the HTML document in the first generation of these languages eventually became known as "DOM Level 0" or "Legacy DOM." No independent standard was developed for DOM Level 0, but it was partly described in the specifications for HTML 4.
Legacy DOM was limited in the kinds of elements that could be accessed. Form, link and image elements could be referenced with a hierarchical name that began with the root document object. A hierarchical name could make use of either the names or the sequential index of the traversed elements. For example, a form input element could be accessed as either document.formName.inputName or document.forms[0].elements[0].
The Legacy DOM enabled client-side form validation and simple interface interactivity like creating tooltips.
In 1997, Netscape and Microsoft released version 4.0 of Netscape Navigator and Internet Explorer respectively, adding support for Dynamic HTML (DHTML) functionality enabling changes to a loaded HTML document. DHTML required extensions to the rudimentary document object that was available in the Legacy DOM implementations. Although the Legacy DOM implementations were largely compatible since JScript was based on JavaScript, the DHTML DOM extensions were developed in parallel by each browser maker and remained incompatible. These versions of the DOM became known as the "Intermediate DOM".
After the standardization of ECMAScript, the W3C DOM Working Group began drafting a standard DOM specification. The completed specification, known as "DOM Level 1", became a W3C Recommendation in late 1998. By 2005, large parts of W3C DOM were well-supported by common ECMAScript-enabled browsers, including Internet Explorer 6 (from 2001), Opera, Safari and Gecko-based browsers (like Mozilla, Firefox, SeaMonkey and Camino).

Standards[edit]
 WHATWG DOM
The W3C DOM Working Group published its final recommendation and subsequently disbanded in 2004. Development efforts migrated to the WHATWG, which continues to maintain a living standard.[5] In 2009, the Web Applications group reorganized DOM activities at the W3C.[6] In 2013, due to a lack of progress and the impending release of HTML5, the DOM Level 4 specification was reassigned to the HTML Working Group to expedite its completion.[7] Meanwhile, in 2015, the Web Applications group was disbanded and DOM stewardship passed to the Web Platform group.[8] Beginning with the publication of DOM Level 4 in 2015, the W3C creates new recommendations based on snapshots of the WHATWG standard.

DOM Level 1 provided a complete model for an entire HTML or XML document, including the means to change any portion of the document.
DOM Level 2 was published in late 2000. It introduced the getElementById function as well as an event model and support for XML namespaces and CSS.
DOM Level 3, published in April 2004, added support for XPath and keyboard event handling, as well as an interface for serializing documents as XML.
DOM Level 4 was published in 2015. It is a snapshot of the WHATWG living standard.[9]
Applications[edit]
Web browsers[edit]
To render a document such as a HTML page, most web browsers use an internal model similar to the DOM. The nodes of every document are organized in a tree structure, called the DOM tree, with the topmost node named as "Document object". When an HTML page is rendered in browsers, the browser downloads the HTML into local memory and automatically parses it to display the page on screen. However, the DOM does not necessarily need to be represented as a tree,[10] and some browsers have used other internal models.[11]

JavaScript[edit]
When a web page is loaded, the browser creates a Document Object Model of the page, which is an object oriented representation of an HTML document that acts as an interface between JavaScript and the document itself. This allows the creation of dynamic web pages,[12] because within a page JavaScript can:

add, change, and remove any of the HTML elements and attributes
change any of the CSS styles
react to all the existing events
create new events
DOM tree structure[edit]
A Document Object Model (DOM) tree is a hierarchical representation of an HTML or XML document. It consists of a root node, which is the document itself, and a series of child nodes that represent the elements, attributes, and text content of the document. Each node in the tree has a parent node, except for the root node, and can have multiple child nodes.

Elements as Nodes[edit]
Elements in an HTML or XML document are represented as nodes in the DOM tree. Each element node has a tag name, attributes, and can contain other element nodes or text nodes as children. For example, an HTML document with the following structure:<html>
  <head>
    <title>My Website</title>
  </head>
  <body>
    <h1>Welcome</h1>
    <p>This is my website.</p>
  </body>
</html>
will be represented in the DOM tree as:- Document (root)
  - html
    - head
      - title
        - "My Website"
    - body
      - h1
        - "Welcome"
      - p
        - "This is my website."

Text Nodes[edit]
Text content within an element is represented as a text node in the DOM tree. Text nodes do not have attributes or child nodes, and are always leaf nodes in the tree. For example, the text content "My Website" in the title element and "Welcome" in the h1 element in the above example are both represented as text nodes.

Attributes as Properties[edit]
Attributes of an element are represented as properties of the element node in the DOM tree. For example, an element with the following HTML:<a href="https://example.com">Link</a>
will be represented in the DOM tree as:- a
  - href: "https://example.com"
  - "Link"

Manipulating the DOM tree[edit]
The DOM tree can be manipulated using JavaScript or other programming languages. Common tasks include navigating the tree, adding, removing, and modifying nodes, and getting and setting the properties of nodes. The DOM API provides a set of methods and properties to perform these operations, such as getElementById, createElement, appendChild, and innerHTML.// Create the root element
var root = document.createElement("root");

// Create a child element
var child = document.createElement("child");

// Add the child element to the root element
root.appendChild(child);
Another way to create a DOM structure is using the innerHTML property to insert HTML code as a string, creating the elements and children in the process. For example:document.getElementById("root").innerHTML = "<child></child>";
Another method is to use a JavaScript library or framework such as jQuery, AngularJS, React, Vue.js, etc. These libraries provide a more convenient and efficient way to create, manipulate and interact with the DOM.
It's also possible to create a DOM structure from an XML or JSON data, using JavaScript methods to parse the data and create the nodes accordingly.
It's important to note that creating a DOM structure does not necessarily mean that it will be displayed in the web page, it only exists in memory and should be appended to the document body or a specific container to be rendered.
In summary, creating a DOM structure involves creating individual nodes and organizing them in a hierarchical structure using JavaScript or other programming languages, and it can be done using several methods depending on the use case and the developer's preference.

Implementations[edit]
Because the DOM supports navigation in any direction (e.g., parent and previous sibling) and allows for arbitrary modifications, an implementation must at least buffer the document that has been read so far (or some parsed form of it).[13]

Layout engines[edit]
Web browsers rely on layout engines to parse HTML into a DOM. Some layout engines, such as Trident/MSHTML, are associated primarily or exclusively with a particular browser, such as Internet Explorer. Others, including Blink, WebKit, and Gecko, are shared by a number of browsers, such as Google Chrome, Opera, Safari, and Firefox. The different layout engines implement the DOM standards to varying degrees of compliance.

Libraries[edit]
DOM implementations:

libxml2
MSXML
Xerces is a collection of DOM implementations written in C++, Java and Perl
xml.dom for Python
XML for <SCRIPT> is a JavaScript-based DOM implementation[14]
PHP.Gt DOM is a server-side DOM implementation based on libxml2 and brings DOM level 4 compatibility[15] to the PHP programming language
Domino is a Server-side (Node.js) DOM implementation based on Mozilla's dom.js. Domino is used in the MediaWiki stack with Visual Editor.
SimpleHtmlDom is a simple HTML document object model in C#, which can generate HTML string programmatically.
APIs that expose DOM implementations:

JAXP (Java API for XML Processing) is an API for accessing DOM providers
Lazarus (Free Pascal IDE) contains two variants of the DOM - with UTF-8 and ANSI format
Inspection tools:

DOM Inspector is a web developer tool
See also[edit]
Shadow DOM
Virtual DOM
References[edit]


^ All versioning refers to W3C DOM only.

^ "Document Object Model (DOM): definition, structure and example". IONOS Digitalguide. Retrieved 2022-04-21.

^ "Document Object Model (DOM)". W3C. Retrieved 2012-01-12. The Document Object Model is a platform- and language-neutral interface that will allow programs and scripts to dynamically access and update the content, structure and style of documents.

^ [1]

^ "DOM Standard". Retrieved 23 September 2016.

^ "W3C Document Object Model". Retrieved 23 September 2016.

^ (plh@w3.org), Philippe Le Hegaret. "New Charter for the HTML Working Group from Philippe Le Hegaret on 2013-09-30 (public-html-admin@w3.org from September 2013)". Retrieved 23 September 2016.

^ "PubStatus - WEBAPPS". Retrieved 23 September 2016.

^ "W3C DOM4". Retrieved 8 January 2021.

^ "What is the Document Object Model?". W3C. Retrieved 2021-09-12. However, the DOM does not specify that documents must be implemented as a tree or a grove, nor does it specify how the relationships among objects be implemented. The DOM is a logical model that may be implemented in any convenient manner.

^ "Modernizing the DOM tree in Microsoft Edge". Microsoft. 19 April 2017. Retrieved 2021-09-12.

^ "JavaScript HTML DOM". Retrieved 23 September 2016.

^ Kogent Solutions Inc. (2008). Ajax Black Book, New Edition (With Cd). Dreamtech Press. p. 40. ISBN 978-8177228380.

^ "XML for <SCRIPT> Cross Platform XML Parser in JavaScript". Retrieved 23 September 2016.

^ "The modern DOM API for PHP 7 projects". 5 December 2021.


General references[edit]
Flanagan, David (2006). JavaScript: The Definitive Guide. O'Reilly & Associates. pp. 312–313. ISBN 0-596-10199-6.
Koch, Peter-Paul (May 14, 2001). "The Document Object Model: an Introduction". Digital Web Magazine. Archived from the original on April 27, 2017. Retrieved January 10, 2009.
Le Hégaret, Philippe (2002). "The W3C Document Object Model (DOM)". World Wide Web Consortium. Retrieved January 10, 2009.
Guisset, Fabian. "What does each DOM Level bring?". Mozilla Developer Center. Mozilla Project. Archived from the original on March 2, 2013. Retrieved January 10, 2009.
External links[edit]



Wikimedia Commons has media related to document object models.

DOM Living Standard by the WHATWG
Original W3C DOM hub by the W3C DOM Working Group (outdated)
Web Platform Working Group (current steward of W3C DOM)
vteJavaScriptCode analysis
ESLint
JSHint
JSLint
Supersets
JS++
TypeScript
Transpilers
AtScript
Babel
ClojureScript
CoffeeScript
Dart
Elm
Emscripten
Google Closure Compiler
Google Web Toolkit
Haxe
LiveScript
Morfik
Nim
Opa
PureScript
Reason
WebSharper
Concepts
Client-side
JavaScript library
JavaScript syntax
Debuggers
Chrome DevTools
Firefox Inspector
Komodo IDE
Microsoft Edge DevTools
Opera DevTools
Safari Web Inspector
Doc generators
JSDoc
Editors (comparison)
Ace
Cloud9 IDE
Atom
CodeMirror
Brackets
Light Table
PhpStorm
Orion
Visual Studio
Visual Studio Express
Visual Studio Code
Visual Studio Team Services
Vim
Engines
List of ECMAScript engines
Frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
Related technologies
Ajax
AssemblyScript
asm.js
Cascading Style Sheets
Document Object Model
HTML
HTML5
JSON
WebAssembly
WebAuthn
Package managers
npm
yarn
Module bundlers
Webpack
Server-side
Active Server Pages
CommonJS
Deno
JSGI
Node.js
Wakanda
Unit testing frameworks (list)
Jasmine
Jest
Mocha
QUnit
People
Douglas Crockford
Ryan Dahl
Brendan Eich
John Resig

vteWeb browsersFeatures ·  standards ·  protocolsFeatures
Bookmarks
Extensions
Privacy mode
Web standards
HTML
v5
CSS
DOM
JavaScript
IndexedDB
Web storage
WebAssembly
WebGL
Protocols
HTTP
v2
v3
Cookies
Encryption
OCSP
WebRTC
WebSocket
ActiveBlink-based
Google Chrome
Chromium
Avast
Blisk
Brave
Citrio
Coc Coc
Dragon
Epic
Falkon
Maxthon
Microsoft Edge
Opera
Otter
Puffin 
Samsung Internet
Silk
Sleipnir
Sputnik
SRWare
UC
Vivaldi
Whale
Yandex
Gecko-based
Firefox
Conkeror
GNU IceCat
PirateBrowser
SlimBrowser
Tor Browser
Gecko forks
Basilisk
K-Meleon
Pale Moon
SeaMonkey
Waterfox
WebKit-based
Safari
Dolphin
Dooble
GNOME Web
iCab
Konqueror
Midori
Roccat
surf
Other
360
Avant
Cake Browser
eww
Flow
Links
Lunascape
Lynx
NetFront
NetSurf
QQ browser
qutebrowser
w3m
DiscontinuedBlink-based
Beaker
Flock
Redcore
Rockmelt
SalamWeb
Torch
Gecko-based
Beonex Communicator
Camino
Classilla
Firefox Lite
Galeon
Ghostzilla
IceDragon
Kazehakase
Kylo
Lotus
MicroB
Minimo
Mozilla suite
Pogo
Strata
Swiftfox
Swiftweasel
TenFourFox
Timberwolf
xB
Trident-based
Internet Explorer
AOL
Deepnet
GreenBrowser
MediaBrowser
NeoPlanet
NetCaptor
SpaceTime
ZAC
WebKit-based
Arora
BOLT
Opera Coast
Fluid
Google TV
Iris
Mercury
OmniWeb
Origyn
QtWeb
rekonq
Shiira
Steel
Browser for Symbian
Uzbl
WebPositive
xombrero
Other
abaco
Amaya
Arachne
Arena
Blazer
Charon
CM Browser
Deepfish
Dillo
Edge Legacy
ELinks
Gazelle
HotJava
IBM Home Page Reader
IBM WebExplorer
IBrowse
KidZui
Line Mode
Mosaic
MSN TV
NetPositive
Netscape
Skweezer
Skyfire
Teashark
ThunderHawk
Vision
WinWAP
WorldWideWeb

Category
Comparisons
List

vteWorld Wide Web Consortium (W3C)Products andstandardsRecommendations
ActivityPub
Activity Streams
ARIA
Canonical XML
CDF
CSS
Animations
Flexbox
Grid
DOM
Geolocation API
HTML
HTML5
IndexedDB
ITS
JSON-LD
Linked Data Notifications
MathML
Micropub
OWL
PLS
RDF
Schema
SISR
SKOS
SMIL
SOAP
SRGS
SRI
SSML
SVG
Filter Effects
SCXML
SHACL
SPARQL
Timed text
VoiceXML
WoT
TD
Web storage
WSDL
Webmention
WebSub
XHTML
+RDFa
XML
Base
Encryption
Events
Information Set
Namespace
Schema
Signature
XForms
XInclude
XLink
XOP
XPath
2.0
3.x
XPointer
XProc
XQuery
XSL
XSL-FO
XSLT
elements
Notes
IndieAuth
XAdES
XBL
XHTML+SMIL
XUP
Working drafts
CCXML
CURIE
EME
InkML
MSE
RIF
SMIL Timesheets
sXBL
WebGPU
WebXR
XFDL
XFrames
XMLHttpRequest
Guidelines
Web Content Accessibility Guidelines
Initiative
Markup Validation Service
Web Accessibility Initiative
Web Components
Deprecated
C-HTML
HDML
JSSS
PGML
VML
WebPlatform
XHTML+MathML+SVG
Obsoleted
P3P
Organizations
World Wide Web Foundation
Working groups
TAG
CSS
SVG
WebAssembly
WebAuthn
WHATWG
Community & business groups
Web Advertising BG
WebAssembly CG
Closed groups
Device Description (DDWG)
HTML
Multimodal Interaction Activity (MMI)
Software
CERN httpd
Libwww
Browsers
Line Mode (1990–)
Arena (1993–98)
Agora (1994–97)
Argo (1994–97)
Amaya (browser/editor, 1996–2012)
Conferences
International World Wide Web Conference (IW3C)
Steering Committee (IW3C2)
First conference ("WWW1", 1994)

vteWeb interfacesServer-sideProtocols
HTTP
v2
v3
Encryption
WebDAV
CGI
SCGI
FCGI
AJP
WSRP
WebSocket
Server APIs
C NSAPI
C ASAPI
C ISAPI
COM ASP
Jakarta Servlet
container
CLI OWIN
ASP.NET Handler
Python WSGI
Python ASGI
Ruby Rack
JavaScript JSGI
Perl PSGI
Portlet
container
Apache modules
mod_include
mod_jk
mod_lisp
mod_mono
mod_parrot
mod_perl
mod_php
mod_proxy
mod_python
mod_wsgi
mod_ruby
Phusion Passenger
Topics
Web resource vs. Web service
Open API
Webhook
Application server
comparison
Scripting
Client-sideBrowser APIs
C NPAPI
LiveConnect
XPConnect
C NPRuntime
C PPAPI
NaCl
ActiveX
BHO
XBAP
Web APIsW3C
Audio
Canvas
CORS
DOM
DOM events
EME
File
Geolocation
IndexedDB
MSE
SSE
SVG
Video
WebAssembly
WebAuthn
WebGPU
WebRTC
WebSocket
WebXR
Web messaging
Web storage
Web worker
XMLHttpRequest
Khronos
WebCL
WebGL
Others
Gears
Web SQL Database (formerly W3C)
WebUSB
Topics
Ajax and Remote scripting vs. DHTML
Browser extension
Mashup
Web IDL
Scripting
Topics
Web page
Static
Dynamic
Web standards
Web API security
Web application
Rich
Single-page
Progressive
Web framework

Authority control: National libraries 
Germany
Israel
United States




